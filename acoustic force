import numpy as np

def calc_levitation_force(amplitude, wavelength, radius, rho, c):
    """
    Calculates the levitation force for a spherical object in an acoustic levitation system.
    
    Parameters:
    amplitude (float): The amplitude of the standing wave.
    wavelength (float): The wavelength of the standing wave.
    radius (float): The radius of the levitated sphere.
    rho (float): The density of the medium.
    c (float): The speed of sound in the medium.
    
    Returns:
    force (float): The levitation force.
    """
    k = 2 * np.pi / wavelength
    P = 2 * rho * c * np.square(amplitude)
    V = (4 / 3) * np.pi * np.power(radius, 3)
    force = P * V * k / (2 * rho * np.square(c))
    return force





import numpy as np
import matplotlib.pyplot as plt

# Define parameters
f = 40e3  # Frequency (Hz)
c = 343  # Speed of sound (m/s)
lambda_ = c / f  # Wavelength (m)
k = 2 * np.pi / lambda_  # Wave number (1/m)
rho = 1.2  # Density of air (kg/m^3)
a = 0.5e-3  # Radius of sphere (m)
V = (4 / 3) * np.pi * a**3  # Volume of sphere (m^3)
P0 = 1e5  # Sound pressure amplitude (Pa)

# Define grid
L = lambda_ / 2  # Length of simulation box (m)
N = 100  # Number of grid points
dx = L / (N - 1)  # Grid spacing (m)
x = np.linspace(0, L, N)  # Grid (m)

# Initialize wave field
P = np.zeros(N)

# Calculate sound pressure field
for n in range(1, 10):
    An = (-1)**(n+1) * (4 * P0 / (n * np.pi)) * np.sin(n * np.pi * a / lambda_)
    P += An * np.sin(n * np.pi * x / L)

# Calculate force on sphere
F = -4 * np.pi * a**3 * rho * c**2 * (P0**2 / (2 * rho * c**2)) * np.sin(k * a)**2

# Plot results
plt.figure()
plt.plot(x, P)
plt.xlabel('Position (m)')
plt.ylabel('Sound pressure amplitude (Pa)')
plt.title('Standing wave field')
plt.show()

plt.figure()
plt.plot(a, F, 'o')
plt.xlabel('Sphere radius (m)')
plt.ylabel('Levitation force (N)')
plt.title('Levitation force vs sphere radius')
plt.show()




